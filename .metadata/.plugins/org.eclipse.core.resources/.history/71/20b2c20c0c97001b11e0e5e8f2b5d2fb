package mandlebrot;

import java.awt.event.KeyEvent;
import java.util.Scanner;

import mandlebrot.display.Display;
import mandlebrot.display.Listener;
import mandlebrot.graph.Grapher;

public class Main {

	private static Display display;
	private static Grapher grapher;
	private static Listener listener;

	public static void main(String[] args) {
		display = new Display();
		grapher = new Grapher(16, 9);
		listener = display.getListener();
		grapher.setCenter(0.37375568, 0.15606782);
		grapher.setZoom(-39);
		if (Display.SAVE_IMG) {
			renderImage();
		} else {
			start();
		}
	}

	public static void renderImage() {
		System.out.println("Image Start");
		grapher.setPixels(display.getPixels());
		display.renderImage(grapher.getCenterX(), grapher.getCenterY(), 1.0 / grapher.getZoomAmount());
	}
	
	public static void testRenders() {
		long lastTime = System.nanoTime();
	}

	public static void start() {
		new Thread(() -> {
			while (true) {
				//grapher.setPixels(display.getPixels());
				grapher.setPixelsThread(display.getPixels());
			}
		}).start();

		new Thread(() -> {
			Scanner scanner = new Scanner(System.in);
			while (true) {
				boolean printInfo = scanner.nextBoolean();
				if (printInfo) {
					System.out.println(grapher);
				}
			}
		}).start();
		// grapher.setPixels(display.getPixels());
		
		long lastTime = System.nanoTime();
		while (true) {
			if ((System.nanoTime()- lastTime) / 1.0E9 > 1/60.0) {
				lastTime = System.nanoTime();
				display.render();
				processKeys();
			}
			// System.out.println("graphed");
//			if (display.getListener().getMousePressed()) {
//				int dx = display.getListener().getXDiff();
//				int dy = display.getListener().getYDiff();
//				display.translatePixels(dx, dy);
//				grapher.changeCener(-dx, -dy);
//				display.getListener().clearDiff();
//				//System.out.println("mousePressed");
//			}
//			if (display.getListener().isScrolling()) {
//				grapher.changeZoom(displayWrapper.get(0).getListener().getScollAmount());
//				display.getListener().clearScrollAmount();
//			}
		}
	}

	public static void processMouseMovement(int dx, int dy) {
		display.translatePixels(dx, dy);
		grapher.changeCener(-dx, -dy);
	}

	public static void processScroll(int clicks) {
		grapher.changeZoom(clicks);
	}

	private static void processKeys() {
		if (listener.keys[KeyEvent.VK_P]) {
			new Thread(() -> renderImage()).start();
			listener.keys[KeyEvent.VK_P] = false;
		}
		if (listener.keys[KeyEvent.VK_F1]) {
			grapher.setJulian(false);
		}
		if (listener.keys[KeyEvent.VK_F2]) {
			grapher.setJulian(true);
		}
		if (grapher.getJulian()) {
			if (listener.keys[KeyEvent.VK_SHIFT]) {
				if (listener.keys[KeyEvent.VK_CONTROL]) {
					if (listener.keys[KeyEvent.VK_UP]) {
						grapher.changeC(0, 0.00001);
					}
					if (listener.keys[KeyEvent.VK_DOWN]) {
						grapher.changeC(0, -0.00001);
					}
					if (listener.keys[KeyEvent.VK_RIGHT]) {
						grapher.changeC(0.00001, 0);
					}
					if (listener.keys[KeyEvent.VK_LEFT]) {
						grapher.changeC(-0.00001, 0);
					}
				} else {
					if (listener.keys[KeyEvent.VK_UP]) {
						grapher.changeC(0, 0.001);
					}
					if (listener.keys[KeyEvent.VK_DOWN]) {
						grapher.changeC(0, -0.001);
					}
					if (listener.keys[KeyEvent.VK_RIGHT]) {
						grapher.changeC(0.001, 0);
					}
					if (listener.keys[KeyEvent.VK_LEFT]) {
						grapher.changeC(-0.001, 0);
					}
				}
			} else if (listener.keys[KeyEvent.VK_CONTROL]) {
				if (listener.keys[KeyEvent.VK_UP]) {
					grapher.changeC(0, 0.0001);
				}
				if (listener.keys[KeyEvent.VK_DOWN]) {
					grapher.changeC(0, -0.0001);
				}
				if (listener.keys[KeyEvent.VK_RIGHT]) {
					grapher.changeC(0.0001, 0);
				}
				if (listener.keys[KeyEvent.VK_LEFT]) {
					grapher.changeC(-0.0001, 0);
				}
			} else {
				if (listener.keys[KeyEvent.VK_UP]) {
					grapher.changeC(0, 0.01);
				}
				if (listener.keys[KeyEvent.VK_DOWN]) {
					grapher.changeC(0, -0.01);
				}
				if (listener.keys[KeyEvent.VK_RIGHT]) {
					grapher.changeC(0.01, 0);
				}
				if (listener.keys[KeyEvent.VK_LEFT]) {
					grapher.changeC(-0.01, 0);
				}
			}
		}

	}

}
