package mandlebrot.graph;

import java.awt.Canvas;
import java.awt.Dimension;
import java.time.LocalTime;

import javax.swing.JFrame;

public class ProgressBar extends Canvas{
	
	private static final int WIDTH = 100;
	private static final int HEIGHT = 100;
	
	private static final long serialVersionUID = -6880647534477952882L;
	
	
	private JFrame jFrame;
	private Grapher grapher;
	
	public ProgressBar(Grapher grapher) {
		this.jFrame = new JFrame();
		this.grapher = grapher;
		
		jFrame.add(this);
		jFrame.setTitle("Progress");
		jFrame.setLocationRelativeTo(null);
		jFrame.setLocation(0, 0);
		this.setPreferredSize(new Dimension(WIDTH, HEIGHT));
		jFrame.setResizable(false);
		jFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		jFrame.setVisible(true);
		jFrame.pack();
	}
	
	public void startTimer() {
		long firstTime = System.nanoTime();
		long lastTime = System.nanoTime();
		long currentTime = System.nanoTime();
		int lastCompleated = 0;
		long sleepTime = (long) ((pixels.length / 250000.0 / 100.0) * 1000.0);
		System.out.println(
				"Sleep Time is " + sleepTime / 1000.0 + "\nFirst estimate is " + (pixels.length / 25000.0 / 100.0));
		try {
			Thread.sleep(sleepTime);
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		while (pixelsCompleated < pixels.length) {
			currentTime = System.nanoTime();
			LocalTime t = LocalTime.now();
			int pixelsProcessed = (pixelsCompleated - lastCompleated);
			double percentProcessed = pixelsProcessed / (double) pixels.length * 100.0;
			double elapsed = (currentTime - firstTime) / 1.0E9;
			double elapsedPercent = (currentTime - lastTime) / 1.0E9;
			double estimateAve = elapsed / ((double) pixelsCompleated) * (pixels.length - pixelsCompleated);
			double estimatePercent = elapsedPercent / (double) pixelsProcessed * (pixels.length - pixelsCompleated);


			lastTime = System.nanoTime();
			lastCompleated = pixelsCompleated;
			
			String out = "";
			out += "\n" + t;
			out += "\n" + (pixelsCompleated / (double) pixels.length * 100.0) + "%";
			out += "\nTotal time elapsed: " + toTime(elapsed);
			out += "\nTime for " + percentProcessed + "%: " + toTime(elapsedPercent);
			out += "\nEstimated by average: " + toTime(estimateAve);
			out += "\nEstimate by last: " + toTime(estimatePercent);
			System.out.println(out);

			sleepTime = (long) (elapsed / (double)(pixelsCompleated / (double) pixels.length * 100 ) * 1000.0);
			System.out.println(sleepTime);
			try {
				Thread.sleep(sleepTime);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
	}
}
